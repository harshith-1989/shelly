{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Georgia;\f2\fswiss\fcharset0 ArialMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red26\green26\blue26;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c13333\c13333\c13333;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15340\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 HTTPS\
\
- 
\f1\b0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Servers and clients still speak exactly the same HTTP to each other, but over a secure SSL connection that encrypts and decrypts their requests and responses.\
- clever part is that anyone can intercept every single one of the messages & and still not be able to read any of the actual data you send\

\f0\b\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
1) Simple SSL Handshake\
Assumption: data encrypted with public-key can be decrypted only with private key
\b0 \
\
C \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97>S   |   http handshake happens here\
	hello!! Please can we start a secure session, with the following cipher details?\
C<\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97S.   |\
	OK!! Here\'92s my certificate, and you can verify that with xyz CA                                                |\
C\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97>S.   |.  to verify that the server is exactly who they claim to be\
	Cool!! U checkout with xyz CA, I am sending a possible session key(pre-master secret)        |\
	 encrypted with your public key                                                                                                 |\
C<\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97S    |\
	Got it!! I was able to decrypt that using my private key, am sending the key encrypted           -\
	with your public key received from the xyz CA for your browser                                                |\
C\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97>S     |. Verification of the client, happens only in very sensitive applications\
	Done!! I was able to decrypt that with my private key, lets start securing messages                 |\
	 using the same session key                                                                                                    -\
C<\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97>S\
					Encrypted session with the session key\
\
2) 
\b Certificate concepts\
- 
\f2\b0\fs32 \cf4 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 In cryptography, a\'a0
\b public key certificate
\b0 , also known as a digital\'a0
\b certificate
\b0 \'a0or identity\'a0
\b certificate
\b0 , is an electronic document used to prove the ownership of a 
\b public key
\b0 .\
- 
\f1 \cf2 \strokec2 Your browser has a pre-installed list of trusted SSL certificates from Certificate Authorities (CAs) that you can view, add and remove from, these certs are controlled by secure organisations like Symantec\
- The public key is distributed as part of the certificate, and the private key is kept incredibly safely guarded by the server\
- the server-cert contents are signed into a digital signature by the CA using CA\'92s private key, and are readable by anyone with the CA\'92s public key (hence anyone can verify that the server-cert is issued by CA )\
- But, the all the root certificates of these CA are self signed\
\pard\pardeftab720\sl380\partightenfactor0
\cf2 - The key thing to remember is that whilst HTTPS keeps data safe on the wire to its destination, it in no way protects you (as a user or a developer) against XSS or database leaks\'a0etc}